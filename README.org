* Introduction

These instructions are for setting up a privileged LXC container with
a Haskell development environment. The container runs Debian GNU/Linux
10 (code-named Buster). One can connect to the container via SSH and
VNC. When connected via VNC, the clipboard is shared between the
container and the host machine thanks to the =autocutsel= tool.

* Prerequisites

[[http://linuxcontainers.org/][LXC]] (Linux Containers) is a virtualization method specific to
operating systems based on the Linux kernel. Therefore, you need to
have a Linux-based operating system to follow these
instructions. Furthermore, the instructions are written for the
GNU/Linux Debian Buster operating system, though they should be
applicable to other GNU/Linux distributions (possibly with minor
modifications).


* Instructions

These are instructions for LXC 3.0.3 in Debian GNU/Linux Buster.

  1. To create a privileged container named "buster-1" with
     several things installed:
     : sudo lxc-create --name buster-1 --template debian -- --release buster --package sudo,emacs,xfonts-base,tightvncserver,xfce4,xfce4-goodies,haskell-platform,haskell-stack,elpa-haskell-mode,elpa-smex,firefox-esr,xserver-xorg-core,curl,autocutsel,git,unar,rsync,bzip2
  2. Start the container:
     : sudo lxc-start --name buster-1
  3. Set a password for the root user:
     : sudo lxc-attach --name buster-1 passwd
  4. Add a user =dev= to the container:
     : sudo lxc-attach --name buster-1 -- useradd -m -s /bin/bash dev
  5. Set the password for the =dev= user:
     : sudo lxc-attach --name buster-1 -- passwd dev
  6. Add =dev= to the =sudo= group for the root privileges:
     : sudo lxc-attach --name buster-1 -- usermod -a -G sudo dev
  7. (Something here is missing about =TTY=; it is resolved by adding
     the =dev= user via =visudo=).
  8. Copy the public SSH key of your user on the host machine to the
     =dev= user in the container:
     : ssh-copy-id -i ~/.ssh/id_rsa.pub dev@192.168.122.195
  9. Install the Keybase program (the 64-bit version):
     : sudo lxc-attach --name buster-1 -- curl --output /tmp/keybase.deb --remote-name https://prerelease.keybase.io/keybase_amd64.deb
     : sudo lxc-attach --name buster-1 -- sudo apt install -y /tmp/keybase.deb
     : sudo lxc-attach --name buster-1 -- su - dev -c run_keybase
  10. Start the VNC server as the =dev= user:
      : sudo lxc-attach --name buster-1 -- su - dev -c vncserver
      This will ask for a password so create one.
  11. Kill the VNC server:
      : sudo lxc-attach --name buster-1 -- su - dev -c "vncserver -kill :1"
  12. Put the following in =~/.vnc/xstartup= in the container:
      #+BEGIN_SRC bash
	#!/bin/bash
	xrdb $HOME/.Xresources
	autocutsel -fork
	startxfce4 &
      #+END_SRC
  13. Start the VNC server again and set the screen resolution:
      : sudo lxc-attach --name buster-1 -- su - dev -c "vncserver -geometry 1920x1080"
  14. Install a VNC viewer on the host machine. I recommend Remmina, though
      others will work. GNOME's Remote Desktop Viewer captures certain
      keystrokes such as Ctrl+W, which means they cannot be used in the VNC
      session; this is why I decided to go with another VNC viewer, namely
      Remmina.
      : sudo apt-get install remmina remmina-plugin-vnc
  15. Start a VNC viewer on the host machine. Provide the container's IP
      address and a port (the port is typically 5901).

** Installing Nix (an unfinished section)
One might want to install the Nix package manager as a number of Haskell
projects use it as a build system. Unfortunately, there is no official Debian
binary package for Nix. Therefore, we will build the package ourselves from an
unofficial [[https://github.com/KaiHa/nix-debian][Debian source package]]. To install the Nix package manager in the
LXC container:

  1. Install =git-buildpackage= on the host:
     : sudo apt-get install git-buildpackage
  2. Create a Debian GNU/Linux Buster image that will be used for building the
     package for Nix:
     : DIST=buster git-pbuilder create
  3. Get the unofficial Debian source package:
     : git clone https://github.com/KaiHa/nix-debian.git
     : cd nix-debian
  4. Build a Debian binary package for Nix:
     : gbp buildpackage --git-pbuilder --git-dist=buster
  5. Find two Debian packages in =../nix.deb-export/=. My host machine is the
     =amd64= architecture, so for Nix 2.2.1 the packages are
     =nix_2.2.1-1_amd64.deb= and =nix-dbgsym_2.2.1-1_amd64.deb=.
  6. Copy the =nix_2.2.1-1_amd64.deb= package to the LXC container:
     : rsync -a --progress *deb dev@192.168.122.142:/tmp/
  7. In the LXC container install dependencies for the binary package for Nix:
     : sudo lxc-attach --name buster-1 -- su - dev -c "sudo apt-get install -y libdbd-sqlite3-perl libwww-curl-perl libboost-context1.67.0 libbrotli1 libreadline7 libsodium23 perl-dbdabi-94 readline-common"
  8. Finally install the =nix_2.2.1-1_amd64.deb= package:
     : sudo lxc-attach --name buster-1 -- su - dev -c "sudo dpkg -i /tmp/nix_2.2.1-1_amd64.deb"
  9. Add the following to =/etc/nix/nix.conf= in the container (create the
     file if it does not exist):
     : build-use-sandbox = false
  10. To have =nixpkgs= working properly, run the following in the container:
      : nix-channel --add https://nixos.org/channels/nixpkgs-unstable
      : nix-channel --update
  11. Stop the container. On the host machine add the following line to
      =/etc/sysctl.d/80-lxc-userns.conf= (create the file if it does not
      exist):
      : kernel.unprivileged_userns_clone=1
  12. Restart =sysctl= on the host:
      : sudo sysctl --system
  13. Start the LXC container:
      : sudo lxc-start --name buster-1
* To be done
** TODO Share the camera, microphone and speaker devices with the container
** TODO Figure out keyboard capturing
   - When I'm in the VNC session, pressing Ctrl+W closes the session window
     instead of a tab in Firefox in the container. See how to fix this. I
     learned that Ctrl+W is a hard-coded keyboard shortcut in GNOME's VNC
     viewer that closes a VNC session.
** TODO Have the VNC server run on boot
** TODO Set up xmonad
** TODO Decrease the display lag
   - Maybe there is something to configure in =/etc/X11= as generated
     by the =gtf= tool from the =xserver-xorg-core= package with
     ModeLine and a dummy driver.
* Copyright

To the extent possible under law, Marko Dimjašević has waived all
copyright and related or neighboring rights to this project ([[https://creativecommons.org/publicdomain/zero/1.0/][CC0]]).
